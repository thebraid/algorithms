window.man = () => console.log(`
демо https://thebraid.github.io/algorithms/

1. Сортировка массивов.
   По умолчанию все функции сортировок используют массив defaultArray = [6, 5, 3, -1, 0, -2, 8, 7, 2, 4, -16, 12, 54, 12, 65].
   Его можно изменить через глобальную переменную "defaultArray" и все сортировки будут брать этот массив.
   Или можно передавать нужный массив как 1й аргумент в функцию.
   Каждая из сортировок не меняет defaultArray.
   
   1.0) callSortAll()      - вызовет по очереди все сортировки с массивом по умолчанию.
   1.1) bubbleSort(array)  - пузырьковая сортировка
   1.2) choiceSort(array)  - сортировка выбором
   1.3) insertSort(array)  - сортировка вставками
   1.4) mergeSort(array)   - сортировка слиянием
   1.5) quickSort(array)   - быстрая сортировка
   
2) Поиск простых чисел
   Аргумент по умолчанию 100 - т.е. все простые числа до 100.

   2.1) findSimpleNumber1(N) - первый вариант нахождения простых чисел
   2.2) findSimpleNumber2(N) - улучшенный 1й вариант
   2.3) findSimpleNumber3(N) - финальный вариант (улучшенный 2й вариант).
   
3) Заполнить массив по спирали 
  arraySpiral(NxM) где N = 4 по умолчанию,M = N по умолчанию
  
  пример вызова:
    arraySpiral();    // 4x4
    arraySpiral(5);   // 5x5
    arraySpiral(5,7); // 5x7
    
4) Бинарный поиск по массиву
    binarySearch(elem, array), где
    elem  - элемент который ищем в массиве, по умолчанию = 5;
    array - массив поиска, по умолчанию = [1,2,3,4,5,6,7,8,9,10]. Массив должен быть упорядоченным.
    
5) Баланс скобок в строке.
   bracketBalance(str), где str по умолчанию = '{asda asdadasd (asdasd} 5434534}' (строка с ошибкой)
   
6) Расставить ферзей.
   chess(N), где N по умолчанию = 8 (размер поля 8х8 и ищем расстановку 8 ферзей).
   Можно задавать размер поля любым, но при значении 12 и свыше вычисления будут занимать длительное время.
   
7) Разворот обьекта в обратную сторону.
  revertList(obj), для просмотра obj по умолчанию набрать "revertList.default"
 
8) Обход дерева в глубину
   treeDeep(tree), для просмотра tree по умолчанию набрать "treeDeep.default"

9) Обход дерева в ширину
   treeWidth(tree), для просмотра tree по умолчанию набрать "treeWidth.default"

10) Нахождение пересечения прямоугольника с координатами x1,x2,y1,y2 с заданными координатами 2 точек прямой.
   10.1) rectAndLine.draw() - нарисует по умолчанию прямоугольник x1=-250, x2=250, y1=-250, y2=250 и прямую с координатами точек [-5, 1] и [4, 2].
   10.2) rectAndLine.setRectCoords(x1, x2, y1, y2); - изменит координаты прямоугольника
   10.3) rectAndLine.setPoints([x1, y1], [x2, y2]);   - изменит координаты точек прямой
     
11) Проверка строки на полиндром
    polindrom(str), str по умолчанию = 'таррат'
    
12) Получение целого числа в заданном диапазоне.
    randomInteger(), или 0 или 1
    randomInteger(max), от 0 до max
    randomInteger(min, max), от min до max

13) Нахождение оптимального пути между графами с помощью алгоритма Флойда — Уоршелла
    floid.init() - выведет результат поиска по установленному графу в консоль ( + отобразит заднный граф на экране).
    floid.changeStart(index) - изменит начальную позицию. 
    floid.changeEnd(index) - изменит конечную позицию. 
    
14) Нахождение оптимального пути между графами с помощью алгоритма Дийкстры
    dijkstra.init() - выведет результат поиска по установленному графу в консоль ( + отобразит заднный граф на экране).
    dijkstra.changeStart(index) - изменит начальную позицию. 
    dijkstra.changeEnd(index) - изменит конечную позицию. 

15) Импорт модулей в зависимости от их зависимостей, с проверкой на зацикленность.
    modules.init() - выведет результат о предустановленных зависимостях.
    modules.changeDepends(newDepends) - задает новые зависимости и отображает результат.
    modules.makeMistake() - изменит текущие зависимости но новые с циклической зависимостью.
    
    modules.depends - покажет текущие зависимости.
    
16) Определение суммы наибольшего подмассива
    getMaxSubSum(array), где array по умолчанию равен [-1, 2, 3, -9, 11, -5, -2, 35];
`);
