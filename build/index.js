!function(n){var e={};function t(o){if(e[o])return e[o].exports;var l=e[o]={i:o,l:!1,exports:{}};return n[o].call(l.exports,l,l.exports,t),l.l=!0,l.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:o})},t.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=18)}([function(n,e){window.findSimpleNumber1=((n=100)=>{const e=Array(n+1).fill(!0),t=[2];for(let n=4;n<e.length;n+=2)e[n]=!1;for(let o=3;o<e.length;o+=2){if(!e[o])continue;t.push(o);let l=2*o;for(;l<n;)e[l]=!1,l+=o}console.log(t)}),window.findSimpleNumber2=((n=100)=>{const e=[];n:for(let t=2;t<=n;t++){for(let n=2;n<t;n++)if(t%n==0)continue n;e.push(t)}console.log(e)}),window.findSimpleNumber3=((n=100)=>{const e=[2];n:for(let t=3;t<=n;t+=2){for(let n=3;n<t;n+=2)if(t%n==0)continue n;e.push(t)}console.log(e)})},function(n,e){const t={value:1,items:[{value:2,items:[{value:4,items:[{value:7},{value:8,items:[{value:11},{value:12}]}]},{value:5,items:[{value:9},{value:10}]}]},{value:3,items:[{value:6}]}]};window.treeWidth=function(n=t){const{value:e,items:o}=n;console.log(e),function n(e){let t=[];e.forEach(n=>{console.log(n.value),n.items&&(t=[...t,...n.items])}),t.length&&n(t)}(o)}},function(n,e){const t={value:1,items:[{value:2,items:[{value:4},{value:5}]},{value:3,items:[{value:6}]}]};window.treeDeep=function(n=t){const{value:e,items:o}=n;console.log(e),o&&o.map(treeDeep)}},function(n,e){const t={value:"a",child:{value:"b",child:{value:"c",child:{value:"d",child:{value:"e",child:null}}}}};window.revertList=function(n=t,e=null){let o;null===n.child?(o={value:n.value,child:e},console.log(`Исходный list: \n ${JSON.stringify(t)}`),console.log(`Результат: \n ${JSON.stringify(o)}`)):(o={value:n.value,child:e},revertList(n.child,o))}},function(n,e){window.quickSort=function(){console.log(function n(e=[...defaultArray]){if(0===e.length)return[];const t=[],o=[],l=e[0];for(let n=1;n<e.length;n++)e[n]<l?t.push(e[n]):o.push(e[n]);return n(t).concat(l,n(o))}())}},function(n,e){window.mergeSort=function(n=[...defaultArray]){let e=[];for(let t=0;t<n.length;t+=1)e.push([n[t]]);for(;e.length>1;){const n=[];for(let t=0;t<e.length;t+=2){const o=e[t],l=e[t+1],i=[];if(!l){n.push(o);break}for(;o.length||l.length;)0!==o.length?0!==l.length&&o[0]>l[0]?(i.push(l[0]),l.splice(0,1)):(i.push(o[0]),o.splice(0,1)):(i.push(l[0]),l.splice(0,1));n.push(i)}e=n}console.log(e[0])}},function(n,e){window.insertSort=function(n=[...defaultArray]){let e=n.length-1;for(let t=0;t<=e;t++){if(0===t)continue;let e=t;for(;e&&n[e]<n[e-1];){let t=n[e];n[e]=n[e-1],n[e-1]=t,e-=1}}console.log(n)}},function(n,e){window.choiceSort=function(n=[...defaultArray]){let e=n.length;function t(n){let t=n[0],o=0;for(let l=0;l<e;l++)n[l]>t&&(t=n[l],o=l);return o}for(;0!==e;){let o=t(n);if(o===e){e-=1;continue}const l=n[e-1];n[e-1]=n[o],n[o]=l,e-=1}console.log(n)}},function(n,e){window.bubbleSort=function(n=[...defaultArray]){let e=n.length;for(;e;)t(n),e-=1;function t(n){for(let e=0;e<n.length-1;e++){let t=n[e],o=n[e+1];if(void 0===o)return;t>o&&(n[e]=o,n[e+1]=t)}}console.log(n)}},function(n,e){window.callSortAll=function(){console.log("\n сортировка bubbleSort"),bubbleSort(),console.log("\n сортировка choiceSort"),choiceSort(),console.log("\n сортировка insertSort"),insertSort(),console.log("\n сортировка mergeSort"),mergeSort(),console.log("\n сортировка quickSort"),quickSort(),console.log("\n")}},function(n,e){window.rectAndLine=new class{constructor(){this.rectCoords=[-250,250,-250,250],this.rectWidth=Math.abs(this.rectCoords[1]-this.rectCoords[0]),this.rectHeight=Math.abs(this.rectCoords[3]-this.rectCoords[2]),this.pointA=[-5,1],this.pointB=[4,2],this.result=[]}findCrossingPoint(n,e,t,o){const[l,i]=n,[r,s]=e,[c,a]=t,[u,d]=o,f=(u*(i*r-s*l-a*r+a*l)+c*(s*l-i*r+d*r-d*l))/(d*(r-l)+a*(l-r)+s*(c-u)+i*(u-c));if(Math.abs(f)===1/0)return console.log("Данные прямые:"),console.log(n,e),console.log(t,o),console.log("Параллельны друг другу"),null;const h=(f*(s-i)-s*l+i*r)/(r-l);return isNaN(h)?null:[f,h]}clear(){const n=document.getElementById("canvas");n&&n.remove()}findCrossingPoints(){const[n,e,t,o]=this.rectCoords,l=[n,t],i=[n,o],r=[e,o],s=[e,t];[[l,i],[i,r],[r,s],[s,l]].forEach(([l,i])=>{const r=this.findCrossingPoint(this.pointA,this.pointB,l,i);r&&(r[0]>e||r[0]<n||r[1]>o||r[1]<t||r&&this.result.push(r))})}drawRectangle(){const{rectWidth:n,rectHeight:e}=this;this.clear();const t=document.createElement("canvas");t.id="canvas",t.width=n,t.height=e;const o=t.getContext("2d");o.beginPath(),o.moveTo(0,0),o.lineTo(n,0),o.lineTo(n,e),o.lineTo(0,e),o.closePath(),o.strokeStyle="black",o.stroke(),document.body.appendChild(t)}drawTextCoords(n,e,t){const{rectWidth:o,rectHeight:l,rectCoords:i}=this,[r,s,c,a]=i;n.font="12pt Arial",n.fillText("0:0",e,l-t+12),n.fillText(`${r}:${c}`,12,l-12),n.fillText(`${r}:${a}`,12,20),n.fillText(`${s}:${a}`,o-70,20),n.fillText(`${s}:${c}`,o-70,l-12)}drawAxis(){const n=document.getElementById("canvas").getContext("2d"),{rectWidth:e,rectHeight:t}=this,{rectCoords:o}=this,l=o[0],i=o[2],r=l<0?-l:0,s=i<0?-i:0;this.drawTextCoords(n,r,s),n.beginPath(),n.moveTo(0,t-s),n.lineTo(e,t-s),n.strokeStyle="red",n.stroke(),n.beginPath(),n.moveTo(r,0),n.lineTo(r,t),n.strokeStyle="red",n.stroke()}drawLine(){const{rectHeight:n}=this;if(this.findCrossingPoints(),2!==this.result.length)return void console.log("Нет точек пересечений");const e=document.getElementById("canvas").getContext("2d"),t=this.rectCoords[0],o=this.rectCoords[2],l=t<0?-t:0,i=o<0?-o:0,[r,s]=this.result;e.beginPath(),e.moveTo(r[0]+l,n-r[1]-i),e.lineTo(s[0]+l,n-s[1]-i),e.strokeStyle="black",e.stroke()}drawInputPanel(){if(document.getElementById("rectAndLine"))return;const n=document.getElementById("template"),e=document.importNode(n.content,!0).children[0];document.body.appendChild(e)}draw(){this.resetResult(),this.drawInputPanel(),this.drawRectangle(),this.drawAxis(),this.drawLine()}resetResult(){this.result=[]}setRectCoords(n,e,t,o){e<n&&([n,e]=[e,n],console.log(`х2 < x1, меняем их значениями. х1 = ${n}; x2 = ${e}`)),o<t&&([t,o]=[o,t],console.log(`y2 < y1, меняем их значениями. y1 = ${t}; x2 = ${o}`)),this.rectCoords=[n,e,t,o],this.rectWidth=Math.abs(e-n),this.rectHeight=Math.abs(o-t),this.draw()}setPoints(n,e){this.pointA=n,this.pointB=e,this.draw()}handlerChangeRectCoords(){const n=document.getElementsByClassName("rectAndLine__input")[0].value;if(!n)return void console.log("Необходимо ввести данные");let e=n.split(",").map(Number);if(4!==e.length)return void console.log("Необходимо ввести 4 числа");const[t,o,l,i]=e;this.setRectCoords(t,o,l,i)}handlerChangePointsCoords(){const n=document.getElementsByClassName("rectAndLine__input")[1].value,e=document.getElementsByClassName("rectAndLine__input")[2].value;if(!n&&!e)return void console.log("Необходимо ввести координаты обоих точек");let t=n.split(",").map(Number),o=e.split(",").map(Number);2===t.length&&2===o.length?this.setPoints(t,o):console.log("Необходимо ввести по 2 числа для каждой точки")}}},function(n,e){window.chess=function(n=8){const e=[];function t(e,t,o){for(let l=-n;l<n;l++){if(0===l)continue;const i=t-l,r=o-l;i>=0&&i<n&&r>=0&&r<n&&(e[i][r]="*");const s=o+l;i>=0&&i<n&&s>=0&&s<n&&(e[i][s]="*")}}function o(e,o,l){for(let i=0;i<n;i++)for(let r=0;r<n;r++)i!==o||r!==l?(t(e,o,l),i!==o&&r!==l||(e[i][r]="*")):e[i][r]=1}function l(t){const l=function(){const e=[];for(let t=1;t<=n;t++)e.push(new Array(n).fill("-"));return e}();let i=0;o(l,i,t),function t(l,i){if(i!==n)for(let e=0;e<n;e++){if("*"===l[i][e]||1===l[i][e])continue;let n=JSON.parse(JSON.stringify(l));o(n,i,e),t(n,i+1)}else e.push(l)}(l,++i)}for(let e=0;e<n;e++)l(e);console.log(e)}},function(n,e){window.bracketsBalance=function(n="{asda asdadasd (asdasd} 5434534}"){const e=[],t={"{":!0,"(":!0,"[":!0},o={"}":"{",")":"(","]":"["};for(let l=0;l<n.length;l++)if(t[n[l]])e.push(n[l]);else if(o[n[l]]){if(e[e.length-1]!==o[n[l]]){console.log(`исходный текст: "${n}"`),console.log(`ошибка на позиции ${l}`);const e=n.slice(0,l-1);return void console.log(`ошибка возникла здесь: "${e}>>${n[l]}<<"`)}e.pop()}e.length?console.log("не закрыты все скобки"):console.log("ошибок нет")}},function(n,e){const t=function(n){const e=Array(n);for(let t=0;t<n;t++)e[t]=t+1;return e}(10);window.binarySearch=((n=5,e=t)=>{console.log(`\n Ищем значение ${n} в массиве:`),console.log(e);const o=e.length-1;let l=0,i=o;n>e[o]?console.log(`Значение ${n} нет в массиве`):function t(){if(i-l==1)return e[l]===n?void console.log(l):e[i]===n?void console.log(i):void console.log("найденного значения нет");let o=Math.floor((i+l)/2);n<e[o]?(i=o,t()):n>e[o]?(l=o,t()):console.log(`index = ${o} \n `)}()})},function(n,e){const t=function(){let n=1;return function(e){n>=4&&(n=0);const t=e[n];return n++,t}}();function o(n,e,t,o,l){return n+=t,[n=l[e=l[e+=o]&&"-"===l[e][n]?e:e-o][n]&&"-"===l[e][n]?n:n-t,e]}function l(n,e){const t=e.toString().length;let o=n.toString();for(;o.length<t;)o="0"+o;return o}window.arraySpiral=function(n=4,e){const i=n*(e=e||n),r=[[1,0],[0,1],[-1,0],[0,-1]],s=function(n,e){const t=[];e=e||n;for(let o=0;o<e;o++)t[o]=Array(n).fill("-");return t}(n,e);let c,a,u=0,d=0;[c,a]=r[0];for(let n=1;n<=i;n++)n=l(n,i),s[d]&&s[d][u]&&"-"===s[d][u]?(s[d][u]=n,[u,d]=o(u,d,c,a,s)):([c,a]=t(r),[u,d]=o(u,d,c,a,s),s[d][u]=n,[u,d]=o(u,d,c,a,s));console.dir(s)}},function(n,e){const t=[{name:"test1",value:53},{name:"test2",value:2}];window.reduceArray=function(n=t){const e={};for(let t=0;t<n.length;t++)e[n[t].name]=n[t].value;console.log(e)}},function(n,e){window.man=function(){console.log('\n1. Сортировка массивов.\n   По умолчанию все функции сортировок используют массив defaultArray = [6, 5, 3, -1, 0, -2, 8, 7, 2, 4, -16, 12, 54, 12, 65].\n   Его можно изменить через глобальную переменную "defaultArray" и все сортировки будут брать этот массив.\n   Или можно передавать нужный массив как 1й аргумент в функцию.\n   Каждая из сортировок не меняет defaultArray.\n   \n   1.0) callSortAll()      - вызовет по очереди все сортировки с массивом по умолчанию.\n   1.1) bubbleSort(array)  - пузырьковая сортировка\n   1.2) choiceSort(array)  - сортировка выбором\n   1.3) insertSort(array)  - сортировка вставками\n   1.4) mergeSort(array)   - сортировка слиянием\n   1.5) quickSort(array)   - быстрая сортировка\n   \n2) Поиск простых чисел\n   Аргумент по умолчанию 100 - т.е. все простые числа до 100.\n\n   2.1) findSimpleNumber1(N) - первый вариант нахождения простых чисел\n   2.2) findSimpleNumber2(N) - улучшенный 1й вариант\n   2.3) findSimpleNumber3(N) - финальный вариант (улучшенный 2й вариант).\n   \n3) Заполнить массив по спирали \n  arraySpiral(NxM) где N = 4 по умолчанию,M = N по умолчанию\n  \n  пример вызова:\n    arraySpiral();    // 4x4\n    arraySpiral(5);   // 5x5\n    arraySpiral(5,7); // 5x7\n    \n4) Бинарный поиск по массиву\n    binarySearch(elem, array), где\n    elem  - элемент который ищем в массиве, по умолчанию = 5;\n    array - массив поиска, по умолчанию = [1,2,3,4,5,6,7,8,9,10]. Массив должен быть упорядоченным.\n    \n5) Баланс скобок в строке.\n   bracketBalance(str), где str по умолчанию = \'{asda asdadasd (asdasd} 5434534}\' (строка с ошибкой)\n   \n6) Расставить ферзей.\n   chess(N), где N по умолчанию = 8 (размер поля 8х8 и ищем расстановку 8 ферзей).\n   Можно задавать размер поля любым, но при значении 12 и свыше вычисления будут занимать длительное время.\n   \n7) Разворот обьекта в обратную сторону.\n  revertList(obj), где obj по умолчанию =\n  \n  {\n    "value": "a",\n    "child": {\n        "value": "b",\n        "child": {\n            "value": "c",\n            "child": {\n                "value": "d",\n                "child": {\n                    "value": "e",\n                    "child": null\n                }\n            }\n        }\n    }\n}\n  \n  \n8) Обход дерева в глубину\n   treeDeep(tree), где tree по умолчанию =\n   \n   {\n    "value": 1,\n    "items": [\n        {\n            "value": 2,\n            "items": [\n                {"value": 4},\n                {"value": 5}\n            ]\n        },\n        {\n            "value": 3,\n            "items": [\n                {"value": 6}\n            ]\n        }\n    ]\n};\n\n\n9) Обход дерева в ширину\n   treeWidth(tree), где tree по умолчанию = \n   \n   {\n    "value": 1,\n    "items": [\n        {\n            "value": 2,\n            "items": [\n                {\n                    "value": 4,\n                    "items": [\n                        {"value": 7},\n                        {\n                          "value": 8,\n                          "items": [\n                              {"value": 11},\n                              {"value": 12}\n                          ]\n                        }\n                    ]\n                },\n                {\n                    "value": 5,\n                    "items": [\n                        {"value": 9},\n                        {"value": 10}\n                    ]\n                }\n            ]\n        },\n        {\n            "value": 3,\n            "items": [\n                {\n                    "value": 6\n                }\n            ]\n        }\n    ]\n}\n\n\n10. Нахождение пересечения прямоугольника с координатами x1,x2,y1,y2 с заданными координатами 2 точек прямой.\n   10.1) rectAndLine.draw() - нарисует по умолчанию прямоугольник x1=-250, x2=250, y1=-250, y2=250 и прямую с координатами точек [-5, 1] и [4, 2].\n   10.2) rectAndLine.setRectCoords(x1, x2, y1, y2); - изменит координаты прямоугольника\n   10.3) rectAndLine.setPoints([x1, y1], [x2, y2]);   - изменит координаты точек прямой\n     \n   \n  ')}},function(n,e,t){window.defaultArray=[6,5,3,-1,0,-2,8,7,2,4,-16,12,54,12,65];t(16),t(15),t(14),t(13),t(12),t(11),t(10),t(9),t(8),t(7),t(6),t(5),t(4),t(3),t(2),t(1),t(0)},function(n,e,t){n.exports=t(17)}]);